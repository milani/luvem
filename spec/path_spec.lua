describe("path #unit",function()
  local path;
  local path_base

  setup(function()
    path = require('path')
    path_base = require('path.base')
  end)

  it("should use correct base functions",function()
    assert.are.same(path._internal,path_base.posix)
  end)

  it("should correctly parse dirname",function()
    assert.are.equal('/usr/bin',path.dirname('/usr/bin/vim'))
    assert.are.equal('/usr',path.dirname('/usr/bin/'))
    assert.are.equal('/usr',path.dirname('/usr/bin'))
    assert.are.equal('/',path.dirname('////'))
  end)

  it("should correctly parse basename",function()
    assert.are.equal('bar.lua',path.basename('bar.lua'))
    assert.are.equal('bar',path.basename('bar.lua', '.lua'))
    assert.are.equal('bar.lua.js',path.basename('bar.lua.js', '.lua'))
    assert.are.equal('.',path.basename('.lua', 'lua'))
    assert.are.equal('bar',path.basename('bar', '.lua'))
    assert.are.equal('',path.basename(''))
    assert.are.equal('basename.ext',path.basename('basename.ext/'))
    assert.are.equal('basename.ext',path.basename('basename.ext//'))

    assert.are.equal('bar.lua',path.basename('/foo/bar.lua'))
    assert.are.equal('bar',path.basename('/foo/bar.lua', '.lua'))

    -- posix treats backslash as any other character
    assert.are.equal('basename.ext\\',path.basename('basename.ext\\'));
    assert.are.equal('basename.ext\\\\',path.basename('basename.ext\\\\'));
    assert.are.equal(string.char(13),path.basename("/foo/bar/"..string.char(13)))
  end)

  it("should correctly parse extension names ",function()
    assert.are.equal('',path.extname(''))
    assert.are.equal('',path.extname('/path/to/file'))
    assert.are.equal('.ext',path.extname('/path/to/file.ext'))
    assert.are.equal('.ext',path.extname('/path.to/file.ext'))
    assert.are.equal('',path.extname('/path.to/file'))
    assert.are.equal('',path.extname('/path.to/.file'))
    assert.are.equal('.ext',path.extname('/path.to/.file.ext'))
    assert.are.equal('.ext',path.extname('/path/to/f.ext'))
    assert.are.equal('.ext',path.extname('/path/to/..ext'))
    assert.are.equal('',path.extname('file'))
    assert.are.equal('.ext',path.extname('file.ext'))
    assert.are.equal('',path.extname('.file'))
    assert.are.equal('.ext',path.extname('.file.ext'))
    assert.are.equal('',path.extname('/file'))
    assert.are.equal('.ext',path.extname('/file.ext'))
    assert.are.equal('',path.extname('/.file'))
    assert.are.equal('.ext',path.extname('/.file.ext'))
    assert.are.equal('.ext',path.extname('.path/file.ext'))
    assert.are.equal('.ext',path.extname('file.ext.ext'))
    assert.are.equal('.',path.extname('file.'))
    assert.are.equal('',path.extname('.'))
    assert.are.equal('',path.extname('./'))
    assert.are.equal('.ext',path.extname('.file.ext'))
    assert.are.equal('',path.extname('.file'))
    assert.are.equal('.',path.extname('.file.'))
    assert.are.equal('.',path.extname('.file..'))
    assert.are.equal('',path.extname('..'))
    assert.are.equal('',path.extname('../'))
    assert.are.equal('.ext',path.extname('..file.ext'))
    assert.are.equal('.file',path.extname('..file'))
    assert.are.equal('.',path.extname('..file.'))
    assert.are.equal('.',path.extname('..file..'))
    assert.are.equal('.',path.extname('...'))
    assert.are.equal('.ext',path.extname('...ext'))
    assert.are.equal('.',path.extname('....'))
    assert.are.equal('.ext',path.extname('file.ext/'))
    assert.are.equal('.ext',path.extname('file.ext//'))
    assert.are.equal('',path.extname('file/'))
    assert.are.equal('',path.extname('file//'))
    assert.are.equal('.',path.extname('file./'))
    assert.are.equal('.',path.extname('file.//'))

    -- posix treats backslash as any other character
    assert.are.equal('',path.extname('.\\'))
    assert.are.equal('.\\',path.extname('..\\'))
    assert.are.equal('.ext\\',path.extname('file.ext\\'))
    assert.are.equal('.ext\\\\',path.extname('file.ext\\\\'))
    assert.are.equal('',path.extname('file\\'))
    assert.are.equal('',path.extname('file\\\\'))
    assert.are.equal('.\\',path.extname('file.\\'))
    assert.are.equal('.\\\\',path.extname('file.\\\\'))

  end)

  it("should correctly distinguish absolute urls", function()
    assert(path.isAbsolute('/foo/bar.lua'))
    assert(not path.isAbsolute('foo/bar.lua'))
  end)

  it("should correctly get root", function()
    assert.are.equal('/',path.getRoot())
    assert.are.equal('/',path.getRoot('irrelevant'))
  end)

  it("should correctly splitpath", function()
    assert.are.same({"/", "", ""}, {path._splitPath('/')})
    assert.are.same({"/", "", "foo"}, {path._splitPath('/foo')})
    assert.are.same({"/", "", "foo"}, {path._splitPath('/foo/')})
    assert.are.same({"/", "foo/", "bar"}, {path._splitPath('/foo/bar')})
    assert.are.same({"/", "foo/", "bar"}, {path._splitPath('/foo/bar/')})
    assert.are.same({"/", "foo/", "bar.lua"}, {path._splitPath('/foo/bar.lua')})
    assert.are.same({"", "foo/", "bar.lua"}, {path._splitPath('foo/bar.lua')})
  end)

 it("should normalize path", function()
    local dotArray = {"foo", ".", "bar"}
    path._normalizeArray(dotArray)
    assert.are.same({"foo", "bar"}, dotArray)

    local dotdotArray = {"..", "foo", "..", "bar"}
    path._normalizeArray(dotdotArray)
    assert.are.same({"bar"}, dotdotArray)

    local dotdotRelativeArray = {"..", "foo", "..", "bar"}
    path._normalizeArray(dotdotRelativeArray, true)
    assert.are.same({"..", "bar"}, dotdotRelativeArray)

    -- trailing slash
    assert.are.equal("foo/bar",path.normalize("foo/bar"))
    assert.are.equal("foo/bar/",path.normalize("foo/bar/"))
    assert.are.equal("/foo/bar",path.normalize("/foo/bar"))
    assert.are.equal("/foo/bar/",path.normalize("/foo/bar/"))

    -- dot and dotdot
    assert.are.equal("bar.lua",path.normalize("foo/../bar.lua"))
    assert.are.equal("foo/bar.lua",path.normalize("foo/./bar.lua"))
    assert.are.equal("/bar.lua",path.normalize("/foo/../bar.lua"))
    assert.are.equal("/foo/bar.lua",path.normalize("/foo/./bar.lua"))

    -- dot and dotdot only (relative, absolute, with/without trailing slashes)
    assert.are.equal(".",path.normalize("./"))
    assert.are.equal("../",path.normalize("../"))
    assert.are.equal("/",path.normalize("/."))
    assert.are.equal("/",path.normalize("/./"))
    assert.are.equal("/",path.normalize("/.."))
    assert.are.equal("/",path.normalize("/../"))
  end)

  it("should join the paths", function()
    assert.are.equal('foo/foo/bar.lua',path.join('.', 'foo/bar', '..', '/foo/bar.lua'))
    assert.are.equal('/foo/foo/bar.lua',path.join('/.', 'foo/bar', '..', '/foo/bar.lua'))
    assert.are.equal('/bar',path.join('/foo', '../../../bar'))
    assert.are.equal('../../bar',path.join('foo', '../../../bar'))
    assert.are.equal('../../bar',path.join('foo/', '../../../bar'))
    assert.are.equal('../bar',path.join('foo/bar', '../../../bar'))
    assert.are.equal('foo/bar/bar',path.join('foo/bar', './bar'))
    assert.are.equal('foo/bar/bar',path.join('foo/bar/', './bar'))
    assert.are.equal('foo/bar/bar',path.join('foo/bar/', '.', 'bar'))
    assert.are.equal('.',path.join('.', './'))
    assert.are.equal('.',path.join('.', '.', '.'))
    assert.are.equal('.',path.join('.', './', '.'))
    assert.are.equal('.',path.join('.', '/./', '.'))
    assert.are.equal('.',path.join('.', '/////./', '.'))
    assert.are.equal('.',path.join('.'))
    assert.are.equal('.',path.join('', '.'))
    assert.are.equal('foo',path.join('', 'foo'))
    assert.are.equal('foo/bar',path.join('foo', '/bar'))
    assert.are.equal('/foo',path.join('', '/foo'))
    assert.are.equal('/foo',path.join('', '', '/foo'))
    assert.are.equal('foo',path.join('', '', 'foo'))
    assert.are.equal('foo',path.join('foo', ''))
    assert.are.equal('foo/',path.join('foo/', ''))
    assert.are.equal('foo/bar',path.join('foo', '', '/bar'))
    assert.are.equal('../foo',path.join('./', '..', '/foo'))
    assert.are.equal('../../foo',path.join('./', '..', '..', '/foo'))
    assert.are.equal('../../foo',path.join('.', '..', '..', '/foo'))
    assert.are.equal('../../foo',path.join('', '..', '..', '/foo'))
    assert.are.equal('/',path.join('/'))
    assert.are.equal('/',path.join('/', '.'))
    assert.are.equal('/',path.join('/', '..'))
    assert.are.equal('/',path.join('/', '..', '..'))
    assert.are.equal('.',path.join(''))
    assert.are.equal('.',path.join('', ''))
    assert.are.equal(' /foo',path.join(' /foo'))
    assert.are.equal(' /foo',path.join(' ', 'foo'))
    assert.are.equal(' ',path.join(' ', '.'))
    assert.are.equal(' /',path.join(' ', '/'))
    assert.are.equal(' ',path.join(' ', ''))
    assert.are.equal('/foo',path.join('/', 'foo'))
    assert.are.equal('/foo',path.join('/', '/foo'))
    assert.are.equal('/foo',path.join('/', '//foo'))
    assert.are.equal('/foo',path.join('/', '', '/foo'))
    assert.are.equal('/foo',path.join('', '/', 'foo'))
    assert.are.equal('/foo',path.join('', '/', '/foo'))
  end)

  it("should resolve path correctly", function()
    assert.are.equal('/var/file/',path.resolve('/var/lib', '../', 'file/'))
    assert.are.equal('/file/',path.resolve('/var/lib', '/../', 'file/'))
    assert.are.equal('/absolute/',path.resolve('/some/dir', '.', '/absolute/'))
  end)

  it("should resolve relative path", function()
    assert.are.equal('..',path.relative('/var/lib', '/var'))
    assert.are.equal('../../bin',path.relative('/var/lib', '/bin'))
    assert.are.equal('',path.relative('/var/lib', '/var/lib'))
    assert.are.equal('../apache',path.relative('/var/lib', '/var/apache'))
    assert.are.equal('lib',path.relative('/var/', '/var/lib'))
    assert.are.equal('var/lib',path.relative('/', '/var/lib'))
  end)

  it("should detect common parts correctly", function()
    assert.are.same({"var"}, path._commonParts("/var/lib/", "/var"))
    assert.are.same({"foo"}, path._commonParts("/foo/bar/", "/foo/bark/"))
    assert.are.same({"foo", "bar"}, path._commonParts("/foo/bar///", "/foo/bar"))
  end)
end)
