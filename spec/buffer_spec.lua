describe("buffer #unit", function()

  local Buffer = require('buffer').Buffer
  local buf = Buffer:new(4)

  it("should assign values using array access operator ", function()
    buf[1] = 0xFB
    buf[2] = 0x04
    buf[3] = 0x23
    buf[4] = 0x42
  end)

  it("should test read functions", function()
    assert.are.equal(0xFB,buf:readUInt8(1))
    assert.are.equal(0x04,buf:readUInt8(2))
    assert.are.equal(0x23,buf:readUInt8(3))
    assert.are.equal(0x42,buf:readUInt8(4))
    assert.are.equal(-0x05,buf:readInt8(1))
    assert.are.equal(0x04,buf:readInt8(2))
    assert.are.equal(0x23,buf:readInt8(3))
    assert.are.equal(0x42,buf:readInt8(4))
    assert.are.equal(0xFB04,buf:readUInt16BE(1))
    assert.are.equal(0x04FB,buf:readUInt16LE(1))
    assert.are.equal(0x0423,buf:readUInt16BE(2))
    assert.are.equal(0x2304,buf:readUInt16LE(2))
    assert.are.equal(0x2342,buf:readUInt16BE(3))
    assert.are.equal(0x4223,buf:readUInt16LE(3))
    assert.are.equal(0xFB042342,buf:readUInt32BE(1))
    assert.are.equal(0x422304FB,buf:readUInt32LE(1))
    assert.are.equal(-0x04FBDCBE,buf:readInt32BE(1))
    assert.are.equal(0x422304FB,buf:readInt32LE(1))
  end)

  it("should test write functions", function()
    buf:writeUInt8(1, 0xFB)
    assert.are.equal(0xFB,buf:readUInt8(1))
    buf:writeUInt8(2, 0x04)
    assert.are.equal(0x04,buf:readUInt8(2))
    buf:writeUInt8(3, 0x23)
    assert.are.equal(0x23,buf:readUInt8(3))
    buf:writeUInt8(4, 0x42)
    assert.are.equal(0x42,buf:readUInt8(4))
    buf:writeInt8(1, -0x05)
    assert.are.equal(-0x05,buf:readInt8(1))
    buf:writeInt8(2, 0x04)
    assert.are.equal(0x04,buf:readInt8(2))
    buf:writeInt8(3, 0x23)
    assert.are.equal(0x23,buf:readInt8(3))
    buf:writeInt8(4, 0x42)
    assert.are.equal(0x42,buf:readInt8(4))
    buf:writeUInt16BE(1, 0xFB04)
    assert.are.equal(0xFB04,buf:readUInt16BE(1))
    buf:writeUInt16LE(1, 0x04FB)
    assert.are.equal(0x04FB,buf:readUInt16LE(1))
    buf:writeUInt16BE(2, 0x0423)
    assert.are.equal(0x0423,buf:readUInt16BE(2))
    buf:writeUInt16LE(2, 0x2304)
    assert.are.equal(0x2304,buf:readUInt16LE(2))
    buf:writeUInt16BE(3, 0x2342)
    assert.are.equal(0x2342,buf:readUInt16BE(3))
    buf:writeUInt16LE(3, 0x4223)
    assert.are.equal(0x4223,buf:readUInt16LE(3))
    buf:writeUInt32BE(1, 0xFB042342)
    assert.are.equal(0xFB042342,buf:readUInt32BE(1))
    buf:writeUInt32LE(1, 0x422304FB)
    assert.are.equal(0x422304FB,buf:readUInt32LE(1))
    buf:writeInt32BE(1, -0x04FBDCBE)
    assert.are.equal(-0x04FBDCBE,buf:readInt32BE(1))
    buf:writeInt32LE(1, 0x422304FB)
    assert.are.equal(0x422304FB,buf:readInt32LE(1))
  end)

  it("should test toString variants",function()
    local buf2 = Buffer:new('abcd')
    assert('abcd',tostring(buf2))
    assert('ab',buf2:toString(1, 2))
    assert('bc',buf2:toString(2, 3))
    assert('cd',buf2:toString(3))
    assert('abcd',buf2:toString())
  end)
end)
